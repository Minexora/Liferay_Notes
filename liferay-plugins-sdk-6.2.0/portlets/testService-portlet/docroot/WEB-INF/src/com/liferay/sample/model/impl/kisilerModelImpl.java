/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.sample.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import com.liferay.sample.model.kisiler;
import com.liferay.sample.model.kisilerModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the kisiler service. Represents a row in the &quot;kisi_bilgileri&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.sample.model.kisilerModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link kisilerImpl}.
 * </p>
 *
 * @author giray
 * @see kisilerImpl
 * @see com.liferay.sample.model.kisiler
 * @see com.liferay.sample.model.kisilerModel
 * @generated
 */
public class kisilerModelImpl extends BaseModelImpl<kisiler>
	implements kisilerModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a kisiler model instance should use the {@link com.liferay.sample.model.kisiler} interface instead.
	 */
	public static final String TABLE_NAME = "kisi_bilgileri";
	public static final Object[][] TABLE_COLUMNS = {
			{ "kid", Types.INTEGER },
			{ "name", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table kisi_bilgileri (kid INTEGER not null primary key,name VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table kisi_bilgileri";
	public static final String ORDER_BY_JPQL = " ORDER BY kisiler.kid ASC";
	public static final String ORDER_BY_SQL = " ORDER BY kisi_bilgileri.kid ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.sample.model.kisiler"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.sample.model.kisiler"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.sample.model.kisiler"));

	public kisilerModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _kid;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setKid(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _kid;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return kisiler.class;
	}

	@Override
	public String getModelClassName() {
		return kisiler.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("kid", getKid());
		attributes.put("name", getName());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer kid = (Integer)attributes.get("kid");

		if (kid != null) {
			setKid(kid);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}
	}

	@Override
	public int getKid() {
		return _kid;
	}

	@Override
	public void setKid(int kid) {
		_kid = kid;
	}

	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@Override
	public kisiler toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (kisiler)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		kisilerImpl kisilerImpl = new kisilerImpl();

		kisilerImpl.setKid(getKid());
		kisilerImpl.setName(getName());

		kisilerImpl.resetOriginalValues();

		return kisilerImpl;
	}

	@Override
	public int compareTo(kisiler kisiler) {
		int primaryKey = kisiler.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof kisiler)) {
			return false;
		}

		kisiler kisiler = (kisiler)obj;

		int primaryKey = kisiler.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<kisiler> toCacheModel() {
		kisilerCacheModel kisilerCacheModel = new kisilerCacheModel();

		kisilerCacheModel.kid = getKid();

		kisilerCacheModel.name = getName();

		String name = kisilerCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			kisilerCacheModel.name = null;
		}

		return kisilerCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(5);

		sb.append("{kid=");
		sb.append(getKid());
		sb.append(", name=");
		sb.append(getName());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(10);

		sb.append("<model><model-name>");
		sb.append("com.liferay.sample.model.kisiler");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>kid</column-name><column-value><![CDATA[");
		sb.append(getKid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = kisiler.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			kisiler.class
		};
	private int _kid;
	private String _name;
	private kisiler _escapedModel;
}